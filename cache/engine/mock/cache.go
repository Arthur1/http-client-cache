// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=./mock/cache.go
//

// Package mock_engine is a generated GoMock package.
package mock_engine

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheEngine is a mock of CacheEngine interface.
type MockCacheEngine struct {
	ctrl     *gomock.Controller
	recorder *MockCacheEngineMockRecorder
}

// MockCacheEngineMockRecorder is the mock recorder for MockCacheEngine.
type MockCacheEngineMockRecorder struct {
	mock *MockCacheEngine
}

// NewMockCacheEngine creates a new mock instance.
func NewMockCacheEngine(ctrl *gomock.Controller) *MockCacheEngine {
	mock := &MockCacheEngine{ctrl: ctrl}
	mock.recorder = &MockCacheEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheEngine) EXPECT() *MockCacheEngineMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheEngine) Get(ctx context.Context, key string, req *http.Request) (*http.Response, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCacheEngineMockRecorder) Get(ctx, key, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheEngine)(nil).Get), ctx, key, req)
}

// Key mocks base method.
func (m *MockCacheEngine) Key(req *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key.
func (mr *MockCacheEngineMockRecorder) Key(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockCacheEngine)(nil).Key), req)
}

// Set mocks base method.
func (m *MockCacheEngine) Set(ctx context.Context, key string, res *http.Response, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, res, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheEngineMockRecorder) Set(ctx, key, res, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheEngine)(nil).Set), ctx, key, res, expiration)
}
